
#coding=utf8

import random,time
def check(num,position,grid):
    pos = position+1
    row = ((pos-1)//9)
    column = (pos%9)-1
    box = ((((pos-1)//9)//3)*3) + ((((pos-1)%9)//3)+1)-1
    if num in [grid[(row*9)],grid[(row*9)+1],grid[(row*9)+2],grid[(row*9)+3],grid[(row*9)+4],grid[(row*9)+5],grid[(row*9)+6],grid[(row*9)+7],grid[(row*9)+8]] or num in [grid[column],grid[column+9],grid[column+18],grid[column+27],grid[column+36],grid[column+45],grid[column+54],grid[column+63],grid[column+72]] or num in [grid[((box//3)*27) +(box%3)*3],grid[(((box//3)*27) +(box%3)*3)+1],grid[((box//3)*27) +(box%3)*3+2],grid[(((box//3)*27) +(box%3)*3)+9],grid[(((box//3)*27) +(box%3)*3)+10],grid[(((box//3)*27)+(box%3)*3)+11],grid[((((box//3)*27) +(box%3)*3))+18],grid[((((box//3)*27) +(box%3)*3))+19],grid[(((box//3)*27) +(box%3)*3)+20]]:
        return False
    grid[position] = num
    return True
realStart = time.time()
highestComp = 0
while True:
    start = time.time()
    completedSquares = 0
    start = True
    while completedSquares < 81:
        if completedSquares > highestComp:
            highestComp = completedSquares
            #print(str((highestComp/81)*100)[0:6],"%")
        if time.time()-start > 4 or start == True:
            start = time.time()
            completedSquares = 0
            Grid = []
            [Grid.append(" ") for i in range(81)]
        bag = [1,2,3,4,5,6,7,8,9]
        found = False
        for choice in range(9):
                randNum = random.choice(bag)
                if check(random.choice(bag),completedSquares,Grid):
                    found = True
                    completedSquares +=1  
                    break
                else:
                    bag.remove(randNum)
        if found == False:
            backTrackLength = 1
            if completedSquares > backTrackLength:
                for bt in range(backTrackLength):
                    Grid[completedSquares-bt] = " "
                    completedSquares -= backTrackLength
    difficulty = 0.6
    print("┌───┬───┬───┬───┬───┬───┬───┬───┬───┐\n" +  "│ "+(str((Grid[0])))+" │ "+(str((Grid[1])))+" │ "+(str((Grid[2])))+" ║ "+(str((Grid[3])))+" │ "+(str((Grid[4])))+" │ "+(str((Grid[5])))+" ║ "+(str((Grid[6])))+" │ "+(str((Grid[7])))+" │ "+(str((Grid[8]))) + " │ " + "\n" + ("├───┼───┼───┼───┼───┼───┼───┼───┼───┤" + ("\n")) +   "│ "+(str((Grid[9])))+" │ "+(str((Grid[10])))+" │ "+(str((Grid[11])))+" ║ "+(str((Grid[12])))+" │ "+(str((Grid[13])))+" │ "+(str((Grid[14])))+" ║ "+(str((Grid[15])))+" │ "+(str((Grid[16])))+" │ "+(str((Grid[17]))) + " │ " + "\n" + ("├───┼───┼───┼───┼───┼───┼───┼───┼───┤" + ("\n"))    +  "│ "+(str((Grid[18])))+" │ "+(str((Grid[19])))+" │ "+(str((Grid[20])))+" ║ "+(str((Grid[21])))+" │ "+(str((Grid[22])))+" │ "+(str((Grid[23])))+" ║ "+(str((Grid[24])))+" │ "+(str((Grid[25])))+" │ "+(str((Grid[26]))) + " │ " + "\n" + ("╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣" + ("\n")) +   "│ "+(str((Grid[27])))+" │ "+(str((Grid[28])))+" │ "+(str((Grid[29])))+" ║ "+(str((Grid[30])))+" │ "+(str((Grid[31])))+" │ "+(str((Grid[32])))+" ║ "+(str((Grid[33])))+" │ "+(str((Grid[34])))+" │ "+(str((Grid[35]))) + " │ " + "\n" + ("├───┼───┼───┼───┼───┼───┼───┼───┼───┤" + ("\n")) +  "│ "+(str((Grid[36])))+" │ "+(str((Grid[37])))+" │ "+(str((Grid[38])))+" ║ "+(str((Grid[39])))+" │ "+(str((Grid[40])))+" │ "+(str((Grid[41])))+" ║ "+(str((Grid[42])))+" │ "+(str((Grid[43])))+" │ "+(str((Grid[44]))) + " │ " + "\n" + ("├───┼───┼───┼───┼───┼───┼───┼───┼───┤" + ("\n")) +   "│ "+(str((Grid[45])))+" │ "+(str((Grid[46])))+" │ "+(str((Grid[47])))+" ║ "+(str((Grid[48])))+" │ "+(str((Grid[49])))+" │ "+(str((Grid[50])))+" ║ "+(str((Grid[51])))+" │ "+(str((Grid[52])))+" │ "+(str((Grid[53]))) + " │ " + "\n" + ("╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣" + ("\n"))    +  "│ "+(str((Grid[54])))+" │ "+(str((Grid[55])))+" │ "+(str((Grid[56])))+" ║ "+(str((Grid[57])))+" │ "+(str((Grid[58])))+" │ "+(str((Grid[59])))+" ║ "+(str((Grid[60])))+" │ "+(str((Grid[61])))+" │ "+(str((Grid[62]))) + " │ " + "\n" + ("├───┼───┼───┼───┼───┼───┼───┼───┼───┤" + ("\n")) +   "│ "+(str((Grid[63])))+" │ "+(str((Grid[64])))+" │ "+(str((Grid[65])))+" ║ "+(str((Grid[66])))+" │ "+(str((Grid[67])))+" │ "+(str((Grid[68])))+" ║ "+(str((Grid[69])))+" │ "+(str((Grid[70])))+" │ "+(str((Grid[71]))) + " │ " + "\n" + ("├───┼───┼───┼───┼───┼───┼───┼───┼───┤" + ("\n")) + "│ "+(str((Grid[72])))+" │ "+(str((Grid[73])))+" │ "+(str((Grid[74])))+" ║ "+(str((Grid[75])))+" │ "+(str((Grid[76])))+" │ "+(str((Grid[77])))+" ║ "+(str((Grid[78])))+ " │ "+(str((Grid[79])))+" │ "+(str((Grid[80]))) + " │ " + "\n" + ("└───┴───┴───┴───┴───┴───┴───┴───┴───┘" + ("\n")))
    for i in range(len(Grid)):
        if difficulty > random.random():
            Grid[i] = (" ")
    print("┌───┬───┬───┬───┬───┬───┬───┬───┬───┐\n" +  "│ "+(str((Grid[0])))+" │ "+(str((Grid[1])))+" │ "+(str((Grid[2])))+" ║ "+(str((Grid[3])))+" │ "+(str((Grid[4])))+" │ "+(str((Grid[5])))+" ║ "+(str((Grid[6])))+" │ "+(str((Grid[7])))+" │ "+(str((Grid[8]))) + " │ " + "\n" + ("├───┼───┼───┼───┼───┼───┼───┼───┼───┤" + ("\n")) +   "│ "+(str((Grid[9])))+" │ "+(str((Grid[10])))+" │ "+(str((Grid[11])))+" ║ "+(str((Grid[12])))+" │ "+(str((Grid[13])))+" │ "+(str((Grid[14])))+" ║ "+(str((Grid[15])))+" │ "+(str((Grid[16])))+" │ "+(str((Grid[17]))) + " │ " + "\n" + ("├───┼───┼───┼───┼───┼───┼───┼───┼───┤" + ("\n"))    +  "│ "+(str((Grid[18])))+" │ "+(str((Grid[19])))+" │ "+(str((Grid[20])))+" ║ "+(str((Grid[21])))+" │ "+(str((Grid[22])))+" │ "+(str((Grid[23])))+" ║ "+(str((Grid[24])))+" │ "+(str((Grid[25])))+" │ "+(str((Grid[26]))) + " │ " + "\n" + ("╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣" + ("\n")) +   "│ "+(str((Grid[27])))+" │ "+(str((Grid[28])))+" │ "+(str((Grid[29])))+" ║ "+(str((Grid[30])))+" │ "+(str((Grid[31])))+" │ "+(str((Grid[32])))+" ║ "+(str((Grid[33])))+" │ "+(str((Grid[34])))+" │ "+(str((Grid[35]))) + " │ " + "\n" + ("├───┼───┼───┼───┼───┼───┼───┼───┼───┤" + ("\n")) +  "│ "+(str((Grid[36])))+" │ "+(str((Grid[37])))+" │ "+(str((Grid[38])))+" ║ "+(str((Grid[39])))+" │ "+(str((Grid[40])))+" │ "+(str((Grid[41])))+" ║ "+(str((Grid[42])))+" │ "+(str((Grid[43])))+" │ "+(str((Grid[44]))) + " │ " + "\n" + ("├───┼───┼───┼───┼───┼───┼───┼───┼───┤" + ("\n")) +   "│ "+(str((Grid[45])))+" │ "+(str((Grid[46])))+" │ "+(str((Grid[47])))+" ║ "+(str((Grid[48])))+" │ "+(str((Grid[49])))+" │ "+(str((Grid[50])))+" ║ "+(str((Grid[51])))+" │ "+(str((Grid[52])))+" │ "+(str((Grid[53]))) + " │ " + "\n" + ("╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣" + ("\n"))    +  "│ "+(str((Grid[54])))+" │ "+(str((Grid[55])))+" │ "+(str((Grid[56])))+" ║ "+(str((Grid[57])))+" │ "+(str((Grid[58])))+" │ "+(str((Grid[59])))+" ║ "+(str((Grid[60])))+" │ "+(str((Grid[61])))+" │ "+(str((Grid[62]))) + " │ " + "\n" + ("├───┼───┼───┼───┼───┼───┼───┼───┼───┤" + ("\n")) +   "│ "+(str((Grid[63])))+" │ "+(str((Grid[64])))+" │ "+(str((Grid[65])))+" ║ "+(str((Grid[66])))+" │ "+(str((Grid[67])))+" │ "+(str((Grid[68])))+" ║ "+(str((Grid[69])))+" │ "+(str((Grid[70])))+" │ "+(str((Grid[71]))) + " │ " + "\n" + ("├───┼───┼───┼───┼───┼───┼───┼───┼───┤" + ("\n")) + "│ "+(str((Grid[72])))+" │ "+(str((Grid[73])))+" │ "+(str((Grid[74])))+" ║ "+(str((Grid[75])))+" │ "+(str((Grid[76])))+" │ "+(str((Grid[77])))+" ║ "+(str((Grid[78])))+ " │ "+(str((Grid[79])))+" │ "+(str((Grid[80]))) + " │ " + "\n" + ("└───┴───┴───┴───┴───┴───┴───┴───┴───┘" + ("\n")))
    highestComp = 0    

# with cutoff of

#2  took 579.47873489207483

#13 took 522.3316459655762

#nocutof 665.9753041267395

# 7 took 451.9565169811249

# 4 took 428.97154998779297

"""
1.7353489398956299
13.357726097106934
20.793183088302612
25.4843111038208
16.933608055114746
1.7188220024108887
27.59122610092163
8.331727027893066
12.236204862594604
7.84431004524231
32.4981529712677
16.453251838684082
21.306309938430786
26.971481800079346
40.63119697570801
9.563676834106445
4.594264030456543
17.50206208229065
0.7814960479736328
14.704923868179321
4.141186952590942
15.470988988876343
2.4377009868621826
17.877147912979126
16.017263174057007
17.830068826675415
8.938360929489136
1.6095819473266602
1.343966007232666
6.953838109970093
37.504709005355835
16.67611289024353
5.234869003295898
2.7658159732818604
10.300620079040527
2.9688868522644043
7.172482967376709
6.656857967376709
6.891256093978882
25.783530950546265
14.157433032989502
8.438130140304565
12.07907509803772
22.236239194869995
7.016062021255493
15.235610961914062
13.391751050949097
16.689022064208984
13.86049485206604
3.8284480571746826
15.704555988311768
32.2682421207428
5.688037872314453
0.7343699932098389
0.20313191413879395
0.062489986419677734
5.672289848327637
0.9688751697540283
1.6408319473266602
8.672740936279297
7.234893083572388
3.9378721714019775
8.54764699935913
8.891293048858643
72.1497049331665
15.470244884490967
7.625788927078247
39.66106200218201
12.32960319519043
0.7968800067901611
17.251630783081055
27.8629310131073
2.7502281665802
14.220252990722656
13.532588005065918
45.48921298980713
4.234776973724365
0.31248021125793457
18.486716985702515
4.67245888710022
13.439481973648071
4.813261032104492
7.235792875289917
12.26711392402649
5.047734975814819
39.129586935043335
9.672584056854248
1.9063279628753662
5.313011884689331
0.2811911106109619
7.4383299350738525
18.565956115722656
1.812744140625
41.26940202713013
7.813277006149292
7.0787880420684814
13.97000789642334
24.939929962158203
5.406628131866455
34.5970299243927
"""
